<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>health = 100; //Generic health value. Can be edited by ship.
missiles = 0; //Number of missile ports on ship.
lasers = 0; //Number of laser ports on ships.
attackSpeedMissiles = 5; //How often missiles can/will be launched.
attackSpeedLasers = 5; //How often lasers can/will be launched.
stratSpeed = 1; //How fast the ship will move in combat, if needed to.

goal = x + global.howFar;

stratGoalX = 0;
stratGoalY = 0;

aimOffset = 64;

engaged = false;

life = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Explosion code goes here.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Shoots lasers

holder = instance_create(x,y,Laser);

holder.maker = id;

targetHolder = instance_nearest(x, y, Monster);

holder.target = targetHolder;

holder.color1 = c_blue;
holder.color2 = c_blue;

alarm[1] = 30 * attackSpeedLasers;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Shoot missles
xHolder = x+(sprite_get_width(sprite_index)/2);
yHolder = y+(sprite_get_height(sprite_index)/2);

holder = instance_create(xHolder,yHolder,Missle);

targetHolder = instance_nearest(xHolder, yHolder, Monster);

spriteTemp = sprite_get_name(targetHolder); //Used to get an aiming point.
aimX = (random(aimOffset)-(aimOffset/2)) + targetHolder.x + sprite_get_width(spriteTemp)/2;
aimY = (random(aimOffset)-(aimOffset/2)) + targetHolder.y + sprite_get_height(spriteTemp)/2;

holder.direction = point_direction(xHolder,yHolder,aimX,aimY);
holder.target = Monster;

alarm[0] = 30 * attackSpeedMissiles;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.battleState == 3) //If we're in battle
{
    if(!engaged)
    {
        engaged = true;
        
        if(attackSpeedMissiles &gt; 0)
        {
            alarm[0] = 1;
        }
        if(attackSpeedLasers &gt; 0)
        {
            alarm[1] = 1;
        }
    }
}

if(stratGoalX != 0 || stratGoalY != 0)//if the ship has a movement goal
{    
    if((x &gt; stratGoalX-speed &amp;&amp; x &lt; stratGoalX+speed) &amp;&amp; (y &gt; stratGoalY-speed &amp;&amp; y &lt; stratGoalY+speed) ) //If it's within a range..
    //if(x == stratGoalX &amp;&amp; y == stratGoalY)
    {
        stratGoalX = 0; //Close enough
        stratGoalY = 0;
        speed = 0;
    }
    else
    {
        direction = point_direction(x,y,stratGoalX,stratGoalY);
        speed = stratSpeed;
    
        
    }
    
   
    

}
else
{
    direction = 0;
    speed = 0;
    image_angle = 0;
}

if(life&lt;=0)
{
    //they died, time to explode.
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
