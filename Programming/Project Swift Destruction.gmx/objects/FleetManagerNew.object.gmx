<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>inTab = false;
isFocused = true;

tab_selected = 0;
tab_moused_over = 0;

onClose = false;
inReplace = false;

hint_askTimer = 0;
hint_askTime = 75;
hint_created = false;

instance_create(0, view_yview[view_current] + (view_hview[view_current] / 4) * 3, obj_currency);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(isFocused)
{
// Set the X and Y
x = ((view_wview[view_current] / 2) - (sprite_get_width(sprite_fm_bkg_cpt1) / 2));
y = ((view_hview[view_current] / 2) - (sprite_get_height(sprite_fm_bkg_cpt1) / 2));

// Detect Mouse location for tab interaction
if ((mouse_y &gt;= y+12) &amp;&amp; (mouse_y &lt;= y+65))
{
    if ((mouse_x &gt;= x+12) &amp;&amp; (mouse_x &lt;= x+185)) {
        // Captain Tab 1 Moused over
        inTab = true;
        tab_moused_over = 0;
    } else if ((mouse_x &gt;= x+185) &amp;&amp; (mouse_x &lt;= x+362)) {
        // Captain Tab 2 Moused over
        inTab = true;
        tab_moused_over = 1;
    } else if ((mouse_x &gt;= x+362) &amp;&amp; (mouse_x &lt;= x+538)) {
        // Captain Tab 3 Moused over
        inTab = true;
        tab_moused_over = 2;
    } else if ((mouse_x &gt;= x+538) &amp;&amp; (mouse_x &lt;= x+714)) {
        // Captain Tab 4 Moused over
        inTab = true;
        tab_moused_over = 3;
    } else if ((mouse_x &gt;= x+714) &amp;&amp; (mouse_x &lt;= x+890)) {
        // Captain Tab 5 Moused over
        inTab = true;
        tab_moused_over = 4;
    } else {
        inTab = false;
    }
} else {
    inTab = false;
}

// Mouse clicked on a tab
if ((inTab) &amp;&amp; (mouse_check_button_released(mb_left))) {
    // In a tab and clicked
    tab_selected = tab_moused_over;
    ttp_resetOnAction = true;
}

// Mouse click on replace

btn_rep_x = x + 57 + 530;
btn_rep_y = y + 115 + 340;

if (mouse_x &gt;= btn_rep_x) &amp;&amp; (mouse_x &lt;= btn_rep_x + sprite_get_width(sprite_fm_replace_btn_true)) {
    if (mouse_y &gt;= btn_rep_y) &amp;&amp; (mouse_y &lt;= btn_rep_y + sprite_get_height(sprite_fm_replace_btn_true)) {
        inReplace = true;
    } else {
        inReplace = false;
    }
} else {
    inReplace = false;
}

if ((inReplace) &amp;&amp; (mouse_check_button_released(mb_left))) {
    // Create a Hiring Manager
    inReplace = false;
    isFocused = false;
    instance_create(x, y, HiringManager);
    ttp_resetOnAction = true;
}

clfm_x = view_xview[view_current] + view_wview[view_current] - (sprite_get_width(sprite_close_true) + 15)
clfm_y = view_yview[view_current] + + 15
if ((mouse_x &gt;= clfm_x) &amp;&amp; (mouse_x &lt;= clfm_x + sprite_get_width(sprite_close_true))) {
    if ((mouse_y &gt;= clfm_y) &amp;&amp; (mouse_y &lt;= clfm_y + sprite_get_height(sprite_close_true))) {
        onClose = true;
    } else {
        onClose = false;
    }
} else {
    onClose = false;
}

if ((onClose) &amp;&amp; (mouse_check_button_released(mb_left))) {
    // GoBack
    room_goto(room_StrategyLayer);
}

if (keyboard_check_pressed(vk_backspace) || keyboard_check_pressed(vk_escape)) {
    // go back to the strat layer
    room_goto(room_StrategyLayer);
}

// Hint
hint_askTimer += 1;

if ((hint_askTimer &gt;= hint_askTime) &amp;&amp; (!hint_created)) {
    // Create a notification tip
    HintNumber = floor(random(4));
    
    switch(HintNumber) {
        case 0:
            temp_title = "Laser Beams";
            temp_message = "Laser Beams fire lasers that destroy enemy ships.";
            temp_length = 60;
            break;
        case 1:
            temp_title = "Ship Launcher";
            temp_message = "This ability tells a captain to launch a ship that explodes and destroys enemy ships.";
            temp_length = 70;
            break;
        case 2:
            temp_title = "Missile Barrage";
            temp_message = "The Capital Ship fires many missiles at random enemy ships.";
            temp_length = 80;
            break;
        default:
            temp_title = "Helmet Colors";
            temp_message = "Each Captain has a different helmet colors telling you what formations they like and what formations they dont.";
            temp_length = 100;
            break;
    }
    //scriptToast(Title, Message, duration in steps);
    scriptToast(temp_title, temp_message, temp_length);

    hint_created = true;
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_Text);

// Draw the background
switch (tab_selected) {
    case 0:
        draw_sprite(sprite_fm_bkg_cpt1,-1,x,y);
        break;
    case 1:
        draw_sprite(sprite_fm_bkg_cpt2,-1,x,y);
        break;
    case 2:
        draw_sprite(sprite_fm_bkg_cpt3,-1,x,y);
        break;
    case 3:
        draw_sprite(sprite_fm_bkg_cpt4,-1,x,y);
        break;
    default:
        draw_sprite(sprite_fm_bkg_cpt5,-1,x,y);
        break;
}

// Captain Info
portraitLocation_x = x + 57;
portraitLocation_y = y + 115;

textLocation_x = portraitLocation_x + 250;
textLocation_y = portraitLocation_y;

// Name
draw_set_font(font_fm_captain);
draw_text(textLocation_x - 25, textLocation_y, global.fleet[tab_selected].captain_name);

draw_set_font(font_Text);
textLocation_y = textLocation_y + 50;

draw_text(textLocation_x, textLocation_y, "Ability");

// Draw Abilities
switch(global.fleet[tab_selected].ability) {
    case 0:
        draw_text(textLocation_x+20, textLocation_y+25, "Sweet Lasers");
        break;
    case 1:
        draw_text(textLocation_x+20, textLocation_y+25, "Missile Barrage");
        break;
    default:
        draw_text(textLocation_x+20, textLocation_y+25, "Ship Launcher");
        break;
}

textLocation_y = textLocation_y + 75;

// Good and Bad Formation Details
draw_text(textLocation_x, textLocation_y, "Favorite Formation");
draw_text(textLocation_x, textLocation_y + 75, "Can't Use");

// Adjust the locations for the details
textLocation_y = textLocation_y + 25;

// Tactical Type Details
// Draw the Portrait
switch(global.fleet[tab_selected].tacticalType) {
    case 0:
        draw_sprite(sprite_fm_port_attack, -1, portraitLocation_x, portraitLocation_y);
        draw_text(textLocation_x + 20, textLocation_y, "Aggressive Formation");
        draw_text(textLocation_x + 20, textLocation_y + 75, "Volley Formation");
        break;
    case 1:
        draw_sprite(sprite_fm_port_skirmish, -1, portraitLocation_x, portraitLocation_y);
        draw_text(textLocation_x + 20, textLocation_y, "Volley Formation");
        draw_text(textLocation_x + 20, textLocation_y + 75, "Shield Formation");
        break;
    default:
        draw_sprite(sprite_fm_port_shield, -1, portraitLocation_x, portraitLocation_y);
        draw_text(textLocation_x + 20, textLocation_y, "Shield Formation");
        draw_text(textLocation_x + 20, textLocation_y + 75, "Attack Formation");
        break;
}
// Draw the protrait's Border
draw_sprite(sprite_fm_portrait_outline, -1, portraitLocation_x, portraitLocation_y);

textLocation_x = portraitLocation_x;
textLocation_y = portraitLocation_y + 235;

// Shiptype
draw_sprite(sprite_fm_shiptpye_bkg, -1, textLocation_x, textLocation_y+50);
draw_text(textLocation_x, textLocation_y, "Shiptype");

switch(global.fleet[tab_selected].shipType) {
    case 0:
        draw_text(textLocation_x+20, textLocation_y+25, "Frigate");
        draw_sprite(sprite_Frigate, 1, textLocation_x + (sprite_get_width(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_width(sprite_Frigate) / 2), textLocation_y + 50 + (sprite_get_height(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_height(sprite_Frigate) / 2));
        break;
    case 1:
        draw_text(textLocation_x+20, textLocation_y+25, "Destroyer");
        draw_sprite(sprite_Destroyer, 1, textLocation_x + (sprite_get_width(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_width(sprite_Destroyer) / 2), textLocation_y + 50 + (sprite_get_height(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_height(sprite_Destroyer) / 2));
        break;
    case 2:
        draw_text(textLocation_x+20, textLocation_y+25, "Cruiser");
        draw_sprite(sprite_Cruiser, 1, textLocation_x + (sprite_get_width(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_width(sprite_Cruiser) / 2), textLocation_y + 50 + (sprite_get_height(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_height(sprite_Cruiser) / 2));
        break;
    case 3:
        draw_text(textLocation_x+20, textLocation_y+25, "Battleship");
        draw_sprite(sprite_Battleship, 1, textLocation_x + (sprite_get_width(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_width(sprite_Battleship) / 2) - 25, textLocation_y + 50 + (sprite_get_height(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_height(sprite_Battleship) / 2));
        break;
    default:
        draw_text(textLocation_x+20, textLocation_y+25, "Missile Ship");
        draw_sprite(sprite_Missleship, 1, textLocation_x + (sprite_get_width(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_width(sprite_Missleship) / 2), textLocation_y + 50 + (sprite_get_height(sprite_fm_shiptpye_bkg) / 2) - (sprite_get_height(sprite_Missleship) / 2));
        break;
}

if (global.fleet[tab_selected].isDead) {
    draw_sprite(sprite_dead_captain_overlay, -1, x+16, y+71);
}

// Replace button

replace_button_x = portraitLocation_x + 530;
replace_button_y = portraitLocation_y + 340;
//draw_text(replace_button_x, replace_button_y, "Replace");
if (inReplace) {
    draw_sprite(sprite_fm_replace_btn_true, -1, replace_button_x, replace_button_y);
} else {
    draw_sprite(sprite_fm_replace_btn_false, -1, replace_button_x, replace_button_y);
}

// Close button
clfm_x = view_xview[view_current] + view_wview[view_current] - (sprite_get_width(sprite_close_true) + 15);
clfm_y = view_yview[view_current] + 15;

if(onClose) {
    draw_sprite(sprite_close_true, -1, clfm_x, clfm_y);
} else {
    draw_sprite(sprite_close_false, -1, clfm_x, clfm_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>451,276</point>
    <point>451,451</point>
  </PhysicsShapePoints>
</object>
