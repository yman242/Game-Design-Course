<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>isActive = true;
ExplosionInterval = random(15) + 30; // In steps
burstAmount = ceil(random(5))+2; // How many explosions per interval
minBurstDelay = 1; // Minimum time between burst explosions in steps
ExplosionRange = 75;

burstDelay = ceil(random(3)) + minBurstDelay;

burstTimer = 0;
currTimer = 0;

lastx = view_xview[view_current] + random(view_wview[view_current]);
lasty = view_yview[view_current] + random(view_hview[view_current]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (isActive)
{
    burstTimer += 1;
    
    // Group explosions by basing it on the last locations
    if ((burstTimer &gt; burstDelay) &amp;&amp; (burstAmount &gt; 0))
    {
        // Generate an explosion location within range
        newx = lastx + ((random(2)-1) * (ExplosionRange * (view_wview[view_current] / global.zoomWidth_Max)));
        newy = lasty + ((random(2)-1) * (ExplosionRange * (view_wview[view_current] / global.zoomWidth_Max)));

        // Create Explosion
        scriptCreateExplosions(newx, newy);
        
        burstTimer = 0;
        burstAmount -= 1;
        burstDelay = ceil(random(2)) + minBurstDelay;
        
        // lastx = newx;
        // lasty = newy;
    }
    
    currTimer += 1;
    
    if (currTimer &gt; ExplosionInterval)
    {
        burstTimer = 0;
        currTimer = 0;
        burstAmount = ceil(random(5))+2;
        burstDelay = ceil(random(3)) + minBurstDelay;
        
        lastx = view_xview[view_current] + random(view_wview[view_current]);
        lasty = view_yview[view_current] + random(view_hview[view_current]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
