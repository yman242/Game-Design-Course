<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sound_global_volume(.01);
sound_volume(sound_MenuMusic,.8);
sound_volume(sound_BossMusic,.8);
sound_volume(sound_CombatMusic,.8);


global.tutorial = false; //If combat tutorial was done.

audio_play_sound(sound_MenuMusic, 100, true);

randomize();

global.shipMax = 5; //Current number of ships allowed on the field.

global.fleetNumber = 1; // The number of fleets we have.

global.fleetShips[0,0] = 1; //This might change, but currently
global.fleetShips[0,1] = 2; //the numbers work as [fleet][unit]
global.fleetShips[0,2] = 1;
global.fleetShips[0,3] = 2;
global.fleetShips[0,4] = 1;

global.difficulty_multiplier = 1;

// Destroying Planets and planet reference variables (Variables being played with for planet tracking between layers)
global.currentlyInvadingPlanet = 0; // used to track an object reference to the planet that was last being invaded
global.invasionDone = false;

// Narrative Variables
global.pointInStory = 0;
global.storySequence = 0;

// Bosses for Narrative
global.NextBoss = 0;
global.bossPlanetGenerated = false;
global.bossPlanetGeneralName = "";
global.bossPlanetId = 0;

// Player kill counts
global.playerPlanetsKilled = 0;
global.playerKillCount = 0;

// Fleet Game Start Generation
for (i=0; i&lt;global.shipMax; i+=1)
{
    global.fleet[i] = scriptGenerateCaptain();
    global.fleet[i].fleet_id = i;
}

// Galaxy generation variables
global.Galaxy_Created = false;
globalvar galaxy;

global.GALAXY_HEIGHT = 1180;
global.GALAXY_WIDTH = 1180;
global.GALAXY_PLANETS_MAX = 50;

global.MIN_PLANET_RANGE = 30;
global.MAX_PLANET_RANGE = 250;

global.CENTER_OF_GALAXY_X = 640;
global.CENTER_OF_GALAXY_Y = 640;

global.EDGE_MOUSE_MOVE = 25;

global.MAX_SCALE = 0.5;
global.MIN_SCALE = 0.3;

// Strat Map UI
global.currently_selected_planet_id = -1;
global.mouse_in_info_bounds = false;

global.orbitSpeed = 0.001;

// Fleet Management UI and vars
global.playerTokens = 10000; // Used to recruit / Reroll captains
global.bg_50_created = false;

// Zoom variables
global.screenZooming = false;
global.last_zoom_amount = 0;
global.zoomTimer = 0;
global.zoomWidth_Max = 1280;
global.zoomWidth_Min = 1280 * 0.6;
global.zoomHeight_Max = 720;
global.zoomHeight_Min = 720 * 0.6;

global.distanceViewLastMoved = 0;

// Screen Shake variables
global.originalCameraPosition_x = 0;
global.originalCameraPosition_y = 0;

global.shaking = false;

global.currentShakePriority = 0;
    
global.shakeMagnitude = 0;
global.shakeDuration = 0;
global.shakeTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scriptScreenShakeLoop(global.shakeMagnitude, global.shakeDuration);
//scriptZoomOnPlanet();

if(room == room_Battle)
{
    if(audio_is_playing(sound_MenuMusic))
    {
        audio_stop_sound(sound_MenuMusic);
    }
    
    if(global.currentlyInvadingPlanet.isBoss)
    {
        if(!audio_is_playing(sound_BossMusic))
        {
            audio_play_sound(sound_BossMusic, 100, true);
        }
    }
    else
    {
        if(!audio_is_playing(sound_CombatMusic))
        {
            audio_play_sound(sound_CombatMusic, 100, true);
        }
    }
    
}
else
{
    if(audio_is_playing(sound_BossMusic))
    {
        audio_stop_sound(sound_BossMusic);
    }
    if(audio_is_playing(sound_CombatMusic))
    {
        audio_stop_sound(sound_CombatMusic);
    }
    
    if(!audio_is_playing(sound_MenuMusic))
    {
        audio_play_sound(sound_MenuMusic, 100, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
