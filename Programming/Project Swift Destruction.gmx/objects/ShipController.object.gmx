<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spriteHolder = sprite_Frigate;
drawShipWidth = 32;
drawShipHeight = 32;
drawShipXOffset = 0;
drawShipYOffset = 0;

buttonMaker = 0;

currentNumShips = 0; // used to update formations

target = 0; //The controller's target

formationController = instance_create(x,y,FormationController);
formationController.myMaster = id;

stratButtonTier = -1;
countHolder = 0;

while(stratButtonTier == -1)
{   
    
    if(global.buttonAvailable[countHolder] == 1)
    {
        stratButtonTier = countHolder;
        global.buttonAvailable[countHolder] = 0;
    }
    else
    {
        countHolder++;
    }
    
}


global.buttonTier++;//This adds code to get some UI for the controller.

buttonFormationSprite = sprite_Formations;
buttonSkillSprite = sprite_Abilities;
buttonWidth = sprite_get_width(buttonFormationSprite);
buttonFormationHeight = sprite_get_height(buttonFormationSprite);
buttonSkillHeight = sprite_get_height(buttonSkillSprite);
buttonNumber = 2; //How many buttons we printing?
buttonSpace = buttonWidth/4;



general = 0;
generalCooldown = 10;
generalCooling = false;

strategyType = 0;

shipType = 1;

numOfShips = 9;

stratPosition = 0;

//stratPosition = scriptShipStratLocations(strategyType);

ships = 0;

//ships = scriptShipControllerSetup(shipType,numOfShips,stratPosition,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.captainsDead++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>generalCooling = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(array_length_1d(ships)==0)
{
    with(formationController) instance_destroy();
    general.isDead = true;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ships = scriptUpdateArray(ships);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(target == 0)
{
    targetHolder = instance_nearest(x, y, Monster);
    target = targetHolder.myController;
}
else if(array_length_1d(target.ships) == 0)
{
    targetHolder = instance_nearest(x, y, Monster);
    target = targetHolder.myController;
}

if(currentNumShips&gt;array_length_1d(ships))
{
    formationController.alarm[1] = 1;
}

currentNumShips = array_length_1d(ships);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Button collision

//view_xview[view_current] + (global.buttonTier+stratButtonTier)*buttonWidth+buttonSpace, view_yview[view_current] + view_hview[view_current]-(buttonFormationHeight));

buttonOffset = 0;
stratButtonTierOffset = 0;

for(i=0;i&lt;array_length_1d(global.buttonAvailable);i++)
{
    if(global.buttonAvailable[i] == 0)
    {
        buttonOffset++;
    }
    else if(i&lt;stratButtonTier)
    {
        stratButtonTierOffset--;
    }
}


if(scriptRectanglePointCollision(mouse_x,mouse_y,view_xview[view_current] + (stratButtonTierOffset+buttonOffset+stratButtonTier)*buttonWidth+buttonSpace,view_yview[view_current] + view_hview[view_current]-(buttonFormationHeight),view_xview[view_current] + (stratButtonTierOffset+buttonOffset+stratButtonTier+1)*buttonWidth+buttonSpace,view_yview[view_current] + view_hview[view_current]))
{
    strategyType++;
            
    if(general.tacticalType == 1 &amp;&amp; strategyType == 2)
    {
        strategyType++;
    }
    else if(general.tacticalType == 2 &amp;&amp; strategyType == 1)
    {
        strategyType++;
    }
    
    if(strategyType&gt;2)
    {
        strategyType = 0;
    }
    
    if(general.tacticalType == 0 &amp;&amp; strategyType == 0)
    {
        strategyType++;
    }
    
    if(strategyType == 0)
    {
    
        if(global.skirmish_formations == 0)
        {
            scriptToast("Skirmish", "This formation is great for rapid firing and very effective against shields!", 90);
        }
        global.skirmish_formations++;
    }
    else if(strategyType == 1)
    {
        if(global.attack_formations == 0)
        {
            scriptToast("Attack", "This formation puts all your ship's power into a single, charged shot. Powerful, but leaves them wide open!", 90);
        }
        global.attack_formations++;
    }
    else
    {
    
        if(global.shield_formations == 0)
        {
            scriptToast("Shield", "This formation is good for protecting things behind it, like the planet destroyer. It's weak to rapid fire, though.", 90);
        }
        global.shield_formations++;
    }
    
    
    
    stratPosition = scriptShipStratLocations(strategyType);
    
    if(array_length_1d(ships)&gt;0)
    {
        scriptChangePosition(ships,stratPosition,ships[0].x,ships[0].y);
        formationController.alarm[0] = 1;
    }
}
else if(scriptRectanglePointCollision(mouse_x,mouse_y, view_xview[view_current] + (stratButtonTier+stratButtonTierOffset)*buttonWidth,view_yview[view_current] + view_hview[view_current]-(buttonSkillHeight),view_xview[view_current] + (stratButtonTierOffset+stratButtonTier+1)*buttonWidth,view_yview[view_current] + view_hview[view_current]))
{
    if(global.battleState == 3 &amp;&amp; !generalCooling)
    {
        
        
        if(general.ability == 0 &amp;&amp; global.imperialCredits&gt;=7)
        {
            global.imperialCredits -= 7;
            global.planetDestroyer.alarm[1] = 1;
            generalCooling = true;
            alarm[0] = 30*generalCooldown;
        }
        else if(general.ability == 1 &amp;&amp; global.imperialCredits&gt;=5)
        {
            global.imperialCredits -= 5;
            global.planetDestroyer.alarm[2] = 1;
            generalCooling = true;
            alarm[0] = 30*generalCooldown;
        }
        else if(global.imperialCredits&gt;=10)
        {
            //global.planetDestroyer.alarm[2] = 1;
            global.imperialCredits -= 10;
            generalCooling = true;
            alarm[0] = 30*generalCooldown;
            ships[floor(random(array_length_1d(ships)))].alarm[3] = 1;
        }
        /*
        for(k = 0; k&lt;array_length_1d(ships); k++)
        {   
            ships[k].alarm[3] = 1;
        }*/
    }
}

/*for(i = 0; i&lt;buttonNumber;i++)
{
    if(scriptRectanglePointCollision(mouse_x,mouse_y, view_xview[view_current] + buttonWidth*i,view_yview[view_current] + view_hview[view_current]-(stratButtonTier*buttonHeight),view_xview[view_current] + buttonWidth*(i+1),view_yview[view_current] + view_hview[view_current]-((stratButtonTier-1)*buttonHeight)))
    {
        if(i == 0)
        {
            strategyType++;
            
            if(general.tacticalType == 1 &amp;&amp; strategyType == 2)
            {
                strategyType++;
            }
            else if(general.tacticalType == 2 &amp;&amp; strategyType == 1)
            {
                strategyType++;
            }
            
            if(strategyType&gt;2)
            {
                strategyType = 0;
            }
            
            if(general.tacticalType == 0 &amp;&amp; strategyType == 0)
            {
                strategyType++;
            }
            
            stratPosition = scriptShipStratLocations(strategyType);
    
            if(array_length_1d(ships)&gt;0)
            {
                scriptChangePosition(ships,stratPosition,ships[0].x,ships[0].y);
                formationController.alarm[0] = 1;
            }
        }
        else if(i==1 &amp;&amp; global.battleState == 3 &amp;&amp; !generalCooling)
        {
            generalCooling = true;
            alarm[0] = 30*generalCooldown;
            for(k = 0; k&lt;array_length_1d(ships); k++)
            {   
                ships[k].alarm[3] = 1;
            }
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>colorHolder= c_white;

if(general.ability == 0 &amp;&amp; global.imperialCredits&lt;7)
{
    colorHolder= c_gray;
}
else if(general.ability == 1 &amp;&amp; global.imperialCredits&lt;5)
{
    colorHolder= c_gray;
}
else if(general.ability == 2 &amp;&amp; global.imperialCredits&lt;10)
{
    colorHolder= c_gray;
}

buttonOffset = 0;
stratButtonTierOffset = 0;
for(i=0;i&lt;array_length_1d(global.buttonAvailable);i++)
{
    if(global.buttonAvailable[i] == 0)
    {
        buttonOffset++;
    }
    else if(i&lt;stratButtonTier)
    {
        stratButtonTierOffset--;
    }
}

draw_sprite_ext(buttonSkillSprite,general.ability,view_xview[view_current] + (stratButtonTier+stratButtonTierOffset)*buttonWidth, view_yview[view_current] + view_hview[view_current]-(buttonSkillHeight),1,1,0,colorHolder,1);
//draw_sprite_ext(buttonSkillSprite,general.ability,view_xview[view_current] + stratButtonTier*buttonWidth, view_yview[view_current] + view_hview[view_current]-(buttonSkillHeight),1,1,0,colorHolder,1);
//draw_set_color(c_white);
//draw_text(view_xview[view_current] + stratButtonTier*buttonWidth, view_yview[view_current] + view_hview[view_current]-(buttonSkillHeight),general.ability);

//draw_sprite(buttonFormationSprite,strategyType,view_xview[view_current] + (global.buttonTier+stratButtonTier)*buttonWidth+buttonSpace, view_yview[view_current] + view_hview[view_current]-(buttonFormationHeight));
draw_sprite(buttonFormationSprite,strategyType,view_xview[view_current] + (buttonOffset+stratButtonTierOffset+stratButtonTier)*buttonWidth+buttonSpace, view_yview[view_current] + view_hview[view_current]-(buttonFormationHeight));


draw_sprite_stretched(spriteHolder,0,view_xview[view_current] + (buttonOffset+stratButtonTierOffset+stratButtonTier)*buttonWidth+buttonSpace + drawShipXOffset,view_yview[view_current] + view_hview[view_current]-(buttonFormationHeight)+drawShipYOffset,drawShipWidth,drawShipHeight);


if(generalCooldown)
{
    draw_sprite_ext(sprite_Cooldown,0,view_xview[view_current] + (stratButtonTier+stratButtonTierOffset)*buttonWidth,view_yview[view_current] + view_hview[view_current]-(buttonFormationHeight)+(1-(alarm[0]/(30*generalCooldown)))*buttonFormationHeight,1,alarm[0]/(30*generalCooldown),0,c_white,100);
}

/*for(i=0;i&lt;buttonNumber;i++)
{
    //draw_sprite(buttonSprite,i,i*buttonWidth,view_hview[view_current]-(buttonHeight*stratButtonTier));
    if(i==0)
    {
        draw_sprite(buttonSprite,strategyType,view_xview[view_current] + i*buttonWidth, view_yview[view_current] + view_hview[view_current]-(buttonHeight*stratButtonTier));
    }
    else
    {
        draw_sprite(sprite_Abilities,0,view_xview[view_current] + i*buttonWidth, view_yview[view_current] + view_hview[view_current]-(buttonHeight*stratButtonTier));
    }
}

if(generalCooldown)
{
    draw_sprite_ext(sprite_Cooldown,0,view_xview[view_current] + 1*buttonWidth,view_yview[view_current] + view_hview[view_current]-(buttonHeight*stratButtonTier)+(1-(alarm[0]/(30*generalCooldown)))*buttonHeight,1,alarm[0]/(30*generalCooldown),0,c_white,100);
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.debug)
{
    if(array_length_1d(ships)&gt;0 &amp;&amp; instance_exists(ships[0]))
    {
        //with (ships[0]) instance_destroy();
        ships[0].life = 0;
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
