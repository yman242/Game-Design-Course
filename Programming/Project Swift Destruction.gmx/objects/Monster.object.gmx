<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_Monster1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myController = 0;
captainPower = -1;

engaged = false;

idleMax = 0; //Max frame for the idle.
idleMin = 0; //Lowest idle frame.
moveStart = 0; //frame where we start the movement
moveMax = 0; //highest move frame. (May not want it to be the final frame)
moveMin = 0; //Lowest movement frame. (may not want it to be the start)

aimOffset = 128; //0 is perfect aim. Variable controls how accurate missles are.

burstCount = 0; //used to keep track of burst fire
burstTotal = 3; //Total burst shots to fire
burstDelay = .5;//How many seconds until burst fire.

attackSpeedBurst = 0;
attackSpeedMissiles = 5; //How often missiles can/will be launched.
attackSpeedLasers = 7; //How often lasers can/will be launched.
stratSpeed = 1; //How fast the ship will move in combat, if needed to.

goal = x + global.howFar;

stratGoalX = 0;
stratGoalY = 0;

life = 200;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.monstersKilled = 0;

audio_play_sound(sound_Missle, 0, false);
scriptParticleEngine(x,y,0,random(25),500,250,0,360,1,6,c_gray,sprite_SoftParticle);

holder = instance_create(x,y,obj_ShipExplosion);

if(sprite_index = sprite_MonsterFrigate)
{
    holder.sprite_index = sprite_ExplosionMonsterFrigate;
}
else if (sprite_index = sprite_MonsterDestroyer)
{
    holder.sprite_index = sprite_ExplosionMonsterDestroyer;
}
else if (sprite_index = sprite_MonsterCruiser)
{
    holder.sprite_index = sprite_ExplosionMonsterCruiser;
}
else if (sprite_index = sprite_MonsterBattleship)
{
    holder.sprite_index = sprite_ExplosionMonsterBattleship;
}
else if (sprite_index = sprite_MonsterMissleship)
{
    holder.sprite_index = sprite_ExplosionMonsterMissleship;
}

holder.x = x + (sprite_get_width(sprite_index)/2) - sprite_get_width(holder.sprite_index)/2;
holder.y = y + (sprite_get_height(sprite_index)/2) - sprite_get_height(holder.sprite_index)/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Shoot burst missles
xHolder = x+(sprite_get_width(sprite_index)/2);
yHolder = y+(sprite_get_height(sprite_index)/2);

if(myController.strategyType == 0 &amp;&amp; myController.target&gt;0 &amp;&amp; instance_exists(myController.target))
{
    valueHolder = array_length_1d(myController.target.ships);
    
    if(valueHolder&gt;0)
    {
        audio_play_sound(sound_LaserFire, 0, false);
        holder = instance_create(xHolder,yHolder,Burst);
        
        targetHolder = myController.target.ships[floor(random(valueHolder-1))];
        
        spriteTemp = sprite_get_name(targetHolder); //Used to get an aiming point.
        aimX = (random(aimOffset)-(aimOffset/2)) + targetHolder.x + sprite_get_width(spriteTemp)/2;
        aimY = (random(aimOffset)-(aimOffset/2)) + targetHolder.y + sprite_get_height(spriteTemp)/2;
        
        holder.direction = point_direction(xHolder,yHolder,aimX,aimY);
        holder.target = Ship;
    }
}
    
burstCount++;
if(burstCount&lt;burstTotal)
{
    alarm[2] = 30 * burstDelay;
}
else
{
    alarm[2] = 30 *attackSpeedBurst * myController.formationController.attackSpeed;
    burstCount = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Shoots lasers

valueHolder = array_length_1d(myController.target.ships);

if(myController.strategyType == 0 &amp;&amp; myController.target&gt;0 &amp;&amp; instance_exists(myController.target))
{
    if(valueHolder&gt;0)
    {
        holder = instance_create(x,y,Laser);
        
        holder.maker = id;
        
        
        targetHolder = myController.target.ships[floor(random(valueHolder-1))];
        
        holder.target = targetHolder;
        
        holder.color1 = c_red;
        holder.color2 = c_red;
    }
}

alarm[1] = 30 * attackSpeedLasers* myController.formationController.attackSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Shoot missles
xHolder = x+(sprite_get_width(sprite_index)/2);
yHolder = y+(sprite_get_height(sprite_index)/2);

//show_message(myController.target);
if(myController.strategyType == 0 &amp;&amp; myController.target&gt;0 &amp;&amp; instance_exists(myController.target))
{
    valueHolder = array_length_1d(myController.target.ships);
    
    if(valueHolder&gt;0)
    {
        holder = instance_create(xHolder,yHolder,Missle);
        
        targetHolder = myController.target.ships[floor(random(valueHolder-1))];
        
        spriteTemp = sprite_get_name(targetHolder); //Used to get an aiming point.
        aimX = (random(aimOffset)-(aimOffset/2)) + targetHolder.x + sprite_get_width(spriteTemp)/2;
        aimY = (random(aimOffset)-(aimOffset/2)) + targetHolder.y + sprite_get_height(spriteTemp)/2;
        
        holder.direction = point_direction(xHolder,yHolder,aimX,aimY);
        holder.target = Ship;
    }
}

alarm[0] = 30 * attackSpeedMissiles * myController.formationController.attackSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(life&lt;=0)
{
    //they died, time to explode.
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.battleState == 3) //If we're in battle
{
    
    if(!engaged)
    {
        engaged = true;
        
        if(attackSpeedMissiles &gt; 0)
        {
            alarm[0] = 1;
        }
        if(attackSpeedLasers &gt; 0)
        {
            alarm[1] = 1;
        }
        if(attackSpeedBurst&gt;0)
        {
            alarm[2] = 1;
        }
    }
}

if((stratGoalX != 0 || stratGoalY != 0)&amp;&amp; engaged)//if the ship has a movement goal
{    
    if((x &gt; stratGoalX-speed &amp;&amp; x &lt; stratGoalX+speed) &amp;&amp; (y &gt; stratGoalY-speed &amp;&amp; y &lt; stratGoalY+speed) ) //If it's within a range..
    //if(x == stratGoalX &amp;&amp; y == stratGoalY)
    {
        stratGoalX = 0; //Close enough
        stratGoalY = 0;
        speed = 0;
    }
    else
    {
        direction = point_direction(x,y,stratGoalX,stratGoalY);
        speed = stratSpeed;
    
        
    }
    
   
    

}
else if(engaged)
{
    direction = 0;
    speed = 0;
    image_angle = 0;
}
if(global.battleState == 0)//animating
{
    if(image_index&gt;idleMax)
    {
        image_index = idleMin;
    }
}
else
{
    if(image_index&lt;moveStart)
    {
        image_index = moveStart;
    }
    if(image_index&gt;=moveMax)
    {
        image_index = moveMin;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.selectedShip &gt; 0)
{
    global.selectedShip.target = myController;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>300,300</point>
  </PhysicsShapePoints>
</object>
