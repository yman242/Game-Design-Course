<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_Button</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buttonType = 0; //Used to determine what kind of ship this button deals with. Should match the global shipCount in Game.
imageHolder = sprite_Ship1; //This holds the ship type.
holdingShip = false; //If there's a ship on the mouse.
validShip = false; //Used to tell if placement is valid.
placed = false; //Used to see if the ship was placed.

shipXSize = 160*global.buttonScale; //Size of the ship shown in button.
shipYSize = sprite_get_height(imageHolder)*(shipXSize/sprite_get_width(imageHolder));// 50 should be the max on this...

xOffset = 21*global.buttonScale;
yOffset = 22*global.buttonScale+(50*(global.buttonScale)-shipYSize);//22;

shipName = "Ship 1";
textXOffset = (sprite_get_width(sprite_Button)*3/4); 
textYOffset = 16;

commander = 0;

numberOfShips = 9;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(holdingShip)
{
    if(mouse_x+mouseXOffset&lt;global.linePosition)
    {
        //Slight bug with this. The collision is pixel perfect when comparing AGAINST the thing, but not the 'ghost' image.
        if(!collision_ellipse(mouse_x - mouseXOffset, mouse_y- mouseYOffset, mouse_x + mouseXOffset, mouse_y + mouseYOffset, Ship, true, true ))
        {
            validShip = true;
        }
        else
        {
            validShip = false;
        }
    }
    else
    {
        validShip = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(holdingShip)
{
    holdingShip = false;
    
    if(validShip)
    {
        /*switch (buttonType)
        {
            case 1:
            object = obj_Ship1;
            break
            case 2:
            object = obj_Ship2;
            break;
            default:
            object = obj_Ship1;
        }*/
        
        tempHolder = instance_create(mouse_x - mouseXOffset,mouse_y - mouseYOffset,ShipController);
        tempHolder.strategyType = 0;
        tempHolder.shipType = buttonType;
        tempHolder.numOfShips = numberOfShips;
        tempHolder.buttonMaker = id;
        tempHolder.general = commander;
        
        if(commander.tacticalType == 0 &amp;&amp; tempHolder.strategyType == 0)
        {
            tempHolder.strategyType++;
        }
        
        tempHolder.stratPosition = scriptShipStratLocations(tempHolder.strategyType);
        tempHolder.ships = scriptShipControllerSetup(tempHolder.shipType,tempHolder.numOfShips,tempHolder.stratPosition,tempHolder.x ,tempHolder.y,tempHolder.id);
        
        tempHolder.formationController.alarm[0] = 1;
        
        
        
        global.onField++;
        placed = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!placed)
{
    holdingShip = true;
    validShip = false;
    mouseXOffset = sprite_get_width(imageHolder)/2;
    mouseYOffset = sprite_get_height(imageHolder)/2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.battleState = 0)
{
    if(placed) //used to fade the buttons
    {
        draw_set_alpha(0.2);
    }
    //draw_sprite(sprite_Button,0,x,y);//Draws the button and the ship on said button.

    //draw_sprite_stretched(sprite_Button,0,x,y,image_xscale,image_yscale)
    draw_sprite_stretched(sprite_Button,0,x,y,sprite_get_width(sprite_Button)*image_xscale,sprite_get_height(sprite_Button)*image_yscale)
    draw_sprite_stretched(imageHolder,0,x+xOffset,y+yOffset,shipXSize,shipYSize);
    
    draw_set_alpha(1);
    
    if(holdingShip)//This is for click and dragin ships.
    {
        if(validShip)
        {
            color = c_green
        }
        else
        {
            color = c_red;
        }
        draw_sprite_ext(imageHolder,0,mouse_x - mouseXOffset,mouse_y - mouseYOffset,1,1,0,color,.5);
    }
    
    draw_set_font(font_Text);
    draw_set_halign(fa_center);
    draw_set_color(c_black);
    draw_text(x+textXOffset,y+textYOffset,shipName);
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
