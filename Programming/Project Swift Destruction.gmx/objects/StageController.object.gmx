<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create(0,0,obj_CombatCurrency)

global.buttonScale = 1.5;

if(!global.tutorial)
{
    //global.tutorial = true;
    //room_goto(room_Tutorial);
    scriptToast("Place Ships", "You can place ships by clicking and dragging the cards to the right. Press engage when ready!", 180);
}

global.captainsDead = 0;
global.alliesDead = 0;
global.monstersKilled = 0;
global.shuttles = 0;
alarm[0] = 30*10;

explosionsStarted = false;
explosionChain = 10;

global.selectedShip = 0;

global.buttonTier = 0;//Used to determine how many buttons we have in place in terms of layers.
global.useButtons = -1; //This is gonna be used to see which spots are 'open'

scaleSize = 2;//1.5;//scaled size of screen
scrollSpeed = 2; //Speed of the background.

view_wview[view_current] *= scaleSize;
view_hview[view_current] *= scaleSize;

global.waves = 2; //How many waves of enemies there will be.
currentWave = 0;

waveTotals[0,0] = 3;// Controls the monsters per wave. x is the wave number, y is the enemy type.
waveTotals[1,0] = 5;
monsters = 0; //An array to hold the monsters

global.onField = 0; //How many ships currently on field.

global.moveSpeed = 10; //How fast ships will move to the battle line

global.howFar = room_width*1/4; //Default value to push the ships by.

global.linePosition = (view_wview[view_current] - sprite_get_width(sprite_UIOverlay))/1.5;//room_width/4;

global.battleState = 0; //0 is placing ships, 1 is placing new wave, 2 is moving, 3 is fighting.

looper = room_height/32; //Used to draw the wall.

global.planetDestroyer = instance_create(0,view_hview[view_current]/2,obj_PlanetDestroyer);
//planetDestroyer = instance_create(-512,view_hview[view_current]/2,obj_PlanetDestroyer);
//planetDestroyer.stratGoalX = 32;
//planetDestroyer.stratGoalY = view_hview[view_current]/2 - sprite_get_height(planetDestroyer.sprite_index)/2;
global.planetDestroyer.y -= sprite_get_height(global.planetDestroyer.sprite_index)/2;

attackedPlanet = instance_create(view_wview[view_current],view_hview[view_current]/2,MonsterPlanet); //makes the planet being attacked.
/*attackedPlanet.x -= sprite_get_width(attackedPlanet.sprite_index)*3/4;//Puts the planet on screen and then pushes it back.
attackedPlanet.x += (sprite_get_width(attackedPlanet.sprite_index)/4)*global.waves;
attackedPlanet.y -= sprite_get_height(attackedPlanet.sprite_index)/2;*/

attackedPlanet.x -= sprite_get_width(attackedPlanet.sprite_index);//Puts the planet on screen and then pushes it back.
//attackedPlanet.x += (sprite_get_width(attackedPlanet.sprite_index)/4)*global.waves;
attackedPlanet.y -= sprite_get_height(attackedPlanet.sprite_index);

xHolder = view_wview[view_current] - (sprite_get_width(sprite_Button)*global.buttonScale);
yHolder = sprite_get_height(sprite_Button)*global.buttonScale/2;
incrementHolder = (yHolder*2+32);

buttonCounter = 0;
global.buttonAvailable=0;
for(i=0;i&lt;global.shipMax;i++)
{
    if(!global.fleet[i].isDead)
    {
        if(global.fleet[i].shipType == 0)
        {
            buttons[i] = instance_create(xHolder,yHolder,obj_ShipButton1);
            yHolder += incrementHolder;
        }
        else if(global.fleet[i].shipType == 1)
        {
            buttons[i] = instance_create(xHolder,yHolder,obj_ShipButton2);
            yHolder += incrementHolder;
        }
        else if(global.fleet[i].shipType == 2)
        {
            buttons[i] = instance_create(xHolder,yHolder,obj_ShipButtonCruiser);
            yHolder += incrementHolder;
        }
        else if(global.fleet[i].shipType == 3)
        {
            buttons[i] = instance_create(xHolder,yHolder,obj_ShipButtonBattleship);
            yHolder += incrementHolder;
        }
        else // shipType == 4
        {
            buttons[i] = instance_create(xHolder,yHolder,obj_ShipButtonMissleship);
            yHolder += incrementHolder;
        }
        
        buttons[i].commander = global.fleet[i];
        
        global.buttonAvailable[buttonCounter] = 1;
        buttonCounter++;
    }
}

instance_create(xHolder,yHolder,obj_Go);


whichWay = 0; //Not Implemented yet, but will allow control of directions.
/*
0 = right
1 = down
2 = left
3 = up
*/




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(currentWave-global.waves==0)
{
    global.shuttles+= floor(random(5));   
}
alarm[0] = 30*5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.battleState == 1)
{  
    if(!explosionsStarted)
    {
        scriptActivateExplosions(explosionChain);
        explosionsStarted = true;
    }
 
    currentWave++;
    if(currentWave&gt;global.waves)
    {
        // Conquered the planet
        global.currentlyInvadingPlanet.isControlled = true;
        
        room_goto(room_Win);
    }
    else
    {   
        bossOffset=0
        if(currentWave-global.waves==0)
        {
            global.destroyable = true;
            
            if(!global.tutorial)
            {
                global.tutorial = true;
                scriptToast("Planet Destruction", "The planet is in range! Press the button in the bottom right there to start charging the planet destroyer!", 180);
                scriptToast("Planet Capture", "Alternately you can wait to kill all the enemies flying around to take the planet for yourself!", 180*3);
                scriptToast("Escape Ships", "Whatever you do you better do it fast! As you wait there are people escaping from the planet and, in turn, your eventual control!", 180*6);
            }
            
            if(global.currentlyInvadingPlanet.isBoss)
            {
                bossOffset=1;
                if(global.whichBoss == 0)
                {
                    bossHolder = obj_Boss;
                }
                else if(global.whichBoss == 1)
                {
                    bossHolder = obj_Boss2;
                }
                else
                {
                    bossHolder = obj_Boss3;
                }
                global.whichBoss++;
                
                monsters[0] = instance_create(view_wview+random(view_wview - global.linePosition*1.5), view_hview/2,BossMonsterController);
                monsters[0].ships[0] = instance_create(monsters[0].x, monsters[0].y , bossHolder)
                monsters[0].ships[0].direction = 180;
                monsters[0].ships[0].speed = global.moveSpeed;
                monsters[0].ships[0].myController = monsters[0].id;
                
                global.destroyable = false;
            }
        }
        for(k=0+bossOffset;k&lt;waveTotals[currentWave-1,0];k++)
        {
            monsters[k] = instance_create(view_wview+random(view_wview - global.linePosition*1.5), (view_hview/4)+random(view_hview/2),MonsterController);
        }
        
        monsters = scriptUpdateArray(monsters);
        attackedPlanet.goal = attackedPlanet.x - (sprite_get_width(attackedPlanet.sprite_index)/4);
        global.battleState = 2;
    }
}
else if(global.battleState == 2)
{
    stop = false;
    
    for(i = 0; i&lt;array_length_1d(monsters);i++)
    {
        for(k = 0;k&lt;array_length_1d(monsters[i].ships);k++)
        {
            if(monsters[i].ships[k].x &lt;= global.linePosition*1.1)
            {
                stop = true;
                break;
            }
        }
    }
    if(stop)
    {
        for(i = 0; i&lt;array_length_1d(monsters);i++)
        {
            for(k = 0;k&lt;array_length_1d(monsters[i].ships);k++)
            {
                monsters[i].ships[k].speed = 0;
            }
            
        }
        global.battleState = 3;
    }
}
if(global.battleState&gt;0)
{
    background_hspeed[1] = -scrollSpeed;
    if(!instance_exists(Monster)) //Wave over
    {
        global.battleState = 1;
    }
    else if(!instance_exists(Ship) || !instance_exists(global.planetDestroyer)) //Lost
    {
        room_goto(room_Lose);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.battleState == 0)
{
    /*for(i = 0; i&lt;=looper; i++) //Draws a wall.
    {
        draw_sprite(sprite_Line,0,global.linePosition,i*32);
    }*/
    
    draw_sprite_stretched(sprite_RedBackground,0,global.linePosition,0,(view_wview[view_current] - sprite_get_width(sprite_UIOverlay)*(.90)*global.buttonScale)- global.linePosition,view_wview[view_current]);
    draw_sprite(sprite_RedArea,0,global.linePosition,(view_hview[view_current]/2)-(sprite_get_height(sprite_RedArea)));
    
    draw_sprite_stretched(sprite_UIOverlay,0,view_wview[view_current] - sprite_get_width(sprite_UIOverlay)*global.buttonScale,0,sprite_get_width(sprite_UIOverlay)*global.buttonScale,view_wview[view_current]);
}

if(global.selectedShip&gt;0&amp;&amp;instance_exists(global.selectedShip))
{
    for(i=0;i&lt;array_length_1d(global.selectedShip.ships);i++)
    {
        if(instance_exists(global.selectedShip.ships[i]))
        {
            particleHolder = sprite_SoftParticle;
            scalingHolder = 5;
            widthHolder = (sprite_get_width(global.selectedShip.ships[i].sprite_index)/2)-(scalingHolder*sprite_get_width(particleHolder))/2;
            heightHolder = (sprite_get_height(global.selectedShip.ships[i].sprite_index)/2)-(scalingHolder*sprite_get_height(particleHolder))/2;
            
            draw_sprite_ext(particleHolder,0,global.selectedShip.ships[i].x+ widthHolder,global.selectedShip.ships[i].y+ heightHolder,scalingHolder,scalingHolder,0,c_green,.5);
        }
    }
    
    if(global.selectedShip.target&gt;0&amp;&amp;instance_exists(global.selectedShip.target))
    {
        for(i=0;i&lt;array_length_1d(global.selectedShip.target.ships);i++)
        {
            if(instance_exists(global.selectedShip.target.ships[i]))
            {
                particleHolder = sprite_SoftParticle;
                scalingHolder = 5;
                widthHolder = (sprite_get_width(global.selectedShip.target.ships[i].sprite_index)/2)-(scalingHolder*sprite_get_width(particleHolder))/2;
                heightHolder = (sprite_get_height(global.selectedShip.target.ships[i].sprite_index)/2)-(scalingHolder*sprite_get_height(particleHolder))/2;
                
                draw_sprite_ext(particleHolder,0,global.selectedShip.target.ships[i].x+ widthHolder,global.selectedShip.target.ships[i].y+ heightHolder,scalingHolder,scalingHolder,0,c_red,.5);
            }
        }
    }
}

draw_set_color(c_white)
if(global.battleState &gt; 0)
{
    
    draw_text(view_xview[view_current] + view_wview[view_current] - 384,view_yview[view_current] + view_hview[view_current] - 128,"Escaped pods:");
    draw_text(view_xview[view_current] + view_wview[view_current] - 128,view_yview[view_current] + view_hview[view_current] - 128,global.shuttles);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
