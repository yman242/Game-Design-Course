<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_Missleship</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>Ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>laterDeath = false;
myController = 0;
captainPower = -1;

image_speed = 1/4;

idleMax = 5; //Max frame for the idle.
idleMin = 0; //Lowest idle frame.
moveStart = 6; //frame where we start the movement
moveMax = 22; //highest move frame. (May not want it to be the final frame)
moveMin = 13; //Lowest movement frame. (may not want it to be the start)

missiles = 3; //Number of missile ports on ship.
lasers = 0; //Number of laser ports on ships.

burstCount = 0; //used to keep track of burst fire
burstTotal = 4; //Total burst shots to fire
burstDelay = 0.25;//How many seconds until burst fire.

attackSpeedBurst = 0;
attackSpeedMissiles = 15; //How often missiles can/will be launched.
attackSpeedLasers = 0; //How often lasers can/will be launched.
stratSpeed = 1.5; //How fast the ship will move in combat, if needed to.

goal = x + global.howFar;

stratGoalX = 0;
stratGoalY = 0;

aimOffset = 30;

engaged = false;

life = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xHolder = x+(sprite_get_width(sprite_index)/2);
yHolder = y+(sprite_get_height(sprite_index)/2);

if(myController.strategyType == 0 &amp;&amp; myController.target&gt;0 &amp;&amp; instance_exists(myController.target))
{
    
    valueHolder = array_length_1d(myController.target.ships);
    
    if(valueHolder&gt;0)
    {
        holder = instance_create(xHolder,yHolder,Missle);
        
        targetHolder = myController.target.ships[floor(random(valueHolder-1))];
        
        spriteTemp = sprite_get_name(targetHolder); //Used to get an aiming point.
        //aimX = (random(aimOffset)-(aimOffset/2)) + targetHolder.x + sprite_get_width(spriteTemp)/2;
        //aimY = (random(aimOffset)-(aimOffset/2)) + targetHolder.y + sprite_get_height(spriteTemp)/2;
        
        holder.goalX = random(aimOffset) + targetHolder.x + sprite_get_width(spriteTemp)/2 - aimOffset/2;
        holder.goalY = (random(2) - 1) * (random(aimOffset) + 90) + targetHolder.y + sprite_get_height(spriteTemp)/2;
        
        holder.direction = floor(random(90))-45;
        
        holder.target = Monster;
    }
}

burstCount++;
if(burstCount&lt;burstTotal)
{
    alarm[0] = 30 * burstDelay;
}
else
{
    alarm[0] = 30 *attackSpeedMissiles * myController.formationController.attackSpeed
    burstCount = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>69,69</point>
  </PhysicsShapePoints>
</object>
