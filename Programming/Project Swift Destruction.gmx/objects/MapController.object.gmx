<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Generate Galaxy
scriptGenerateGalaxy();

instance_create(0, 0, obj_fleet_management_btn);
instance_create(0, view_yview[view_current] + (view_hview[view_current] / 4) * 3, obj_currency);

view_yview = (640 - view_hview[0]/2);
view_xview = (640 - view_wview[0]/2);

tip_counter = 0;
tip_duration = 120;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scriptDragView();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Move the screen around based on WASD and mouse on the edge of the screen
ViewMovementSpeed = 5;

//******* Set limits to scrolling *******//

// Keyboard Movement
if (keyboard_check(ord("W"))) {
    // Move the view up
    view_yview[0] -= ViewMovementSpeed;
} else if (keyboard_check(ord("S"))) {
    // Move the view down
    view_yview[0] += ViewMovementSpeed;
}

if (keyboard_check(ord("D"))) {
    // Move the view right
    view_xview[0] += ViewMovementSpeed;
} else if (keyboard_check(ord("A"))) {
    // Move the view left
    view_xview[0] -= ViewMovementSpeed;
}

// Mouse movement
if (mouse_x &lt; view_xview[0] + global.EDGE_MOUSE_MOVE) {
    // Move the view left
    view_xview[0] -= ViewMovementSpeed;
} else if (mouse_x &gt; (view_xview[0] + view_wview[0]) - global.EDGE_MOUSE_MOVE) {
    // Move the view right
    view_xview[0] += ViewMovementSpeed;
}

if (mouse_y &lt; view_yview[0] + global.EDGE_MOUSE_MOVE) {
    // Move the view up?
    view_yview[0] -= ViewMovementSpeed;
} else if (mouse_y &gt; (view_yview[0] + view_hview[0]) - global.EDGE_MOUSE_MOVE) {
    // Move the view down
    view_yview[0] += ViewMovementSpeed;
}

if (view_yview[0] &lt;= -500)
{
    view_yview = -500;
}

if ((view_yview[0] + view_hview[0]) &gt;= 1780)
{
    view_yview = (1780 - view_hview[0]);
}

if (view_xview[0] &lt;= -500)
{
    view_xview = -500;
}

if ((view_xview[0] + view_wview[0]) &gt;= 1780)
{
    view_xview = (1780 - view_wview[0]);
}


// Generate Boss Planets
if (((global.playerPlanetsKilled + global.playerPlanetsConquered) &gt;= global.NextBoss) &amp;&amp; (!global.bossPlanetGenerated))
{
    global.bossPlanetGenerated = true;
    
    if (global.playerPlanetsKilled + global.playerPlanetsConquered &gt; global.NextBoss) {
        global.NextBoss = global.playerPlanetsKilled + global.playerPlanetsConquered + global.NextBoss * 2;
    } else {
        global.NextBoss = global.playerPlanetsKilled + global.playerPlanetsConquered + global.NextBoss * 2;
    }
    
    scriptGenerateBossPlanet();
}

scriptZoomOnPlanet();

if ((!global.hint_boss_appears) &amp;&amp; ((global.playerPlanetsKilled + global.playerPlanetsConquered) &gt;= global.NextBoss)) {
    //scriptToast(Title, Message, duration in steps);
    scriptToast("Target Appears", "Your target has appeared, double check your fleet and prepare for a difficult encounter.", 90);
    
    global.hint_boss_appears = true;
}

// Tips
tip_counter += 1;

if ((tip_counter &gt; tip_duration) &amp;&amp; (!global.hint_planet_info)) {

    // Display Tip for planet interaction
    //scriptToast(Title, Message, duration in steps);
    scriptToast("Invading Planets", "You can click on a planet to view information about it, and to invade it.", 90);
    
    global.hint_planet_info = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.currently_selected_planet_id == -1) {
    // Arrows to show screen arrows
    scale_amount = 0.8;
    total_alpha = 0.35;
    
    center_x = view_xview[view_current] + (view_wview[view_current] / 2) - (sprite_get_width(sprite_screen_arrow_up) * scale_amount / 2);
    bottom_y = view_yview[view_current] + (view_hview[view_current]) - sprite_get_height(sprite_screen_arrow_up) * scale_amount;
    center_y = view_yview[view_current] + (view_hview[view_current] / 2) - (sprite_get_height(sprite_screen_arrow_left) * scale_amount / 2);
    
    //Based on the distance of the mouse_x from the bottom
    top_alpha = 0;
    bottom_alpha = 0;
    left_alpha = 0;
    right_alpha = 0;
    
    mx = mouse_x - view_xview[view_current];
    my = mouse_y - view_yview[view_current];
    
    alpha_wdetection = (view_wview[view_current] / 2) - 100;
    
    if (mx &lt; alpha_wdetection) {
        left_alpha = total_alpha * ((alpha_wdetection - mx) / alpha_wdetection);
    } else if (mx &gt; (view_wview[view_current] - alpha_wdetection)) {
        right_alpha = total_alpha * ((mx - (view_wview[view_current] - alpha_wdetection)) / alpha_wdetection);
    }
    
    alpha_hdetection = (view_hview[view_current] / 2) - 50;
    
    if (my &lt; alpha_hdetection) {
        top_alpha = total_alpha * ((alpha_hdetection - my) / alpha_hdetection);
    } else if (my &gt; (view_hview[view_current] - alpha_hdetection)) {
        bottom_alpha = total_alpha * ((my - (view_hview[view_current] - alpha_hdetection)) / alpha_hdetection);
    }
    
    min_alpha = 0.1;
    
    draw_sprite_ext(sprite_screen_arrow_up, -1, center_x, view_yview[view_current], scale_amount, scale_amount, image_angle, c_white, top_alpha + min_alpha);
    draw_sprite_ext(sprite_screen_arrow_down, -1, center_x, bottom_y, scale_amount, scale_amount, image_angle, c_white, bottom_alpha + min_alpha);
    
    draw_sprite_ext(sprite_screen_arrow_left, -1, view_xview[view_current], center_y, scale_amount, scale_amount, image_angle, c_white, left_alpha + min_alpha);
    draw_sprite_ext(sprite_screen_arrow_right, -1, view_xview[view_current] + view_wview[view_current] - (sprite_get_width(sprite_screen_arrow_right) * scale_amount), center_y, scale_amount, scale_amount, image_angle, c_white, right_alpha + min_alpha);

    draw_set_font(font_Text);
    if (global.NextBoss &gt; global.playerPlanetsKilled) {
        draw_text(view_xview[view_current] + view_wview[view_current] - 385, view_yview[view_current] + view_hview[view_current] - 40, "Investigate " + string(global.NextBoss - global.playerPlanetsKilled) + " More Planets");
    } else {
        draw_set_color(c_green);
        draw_text(view_xview[view_current] + view_wview[view_current] - 200, view_yview[view_current] + view_hview[view_current] - 40, "Target Found");
    }
    
    draw_set_color(c_white);
}

background_x[1] = view_xview[view_current];
background_y[1] = view_yview[view_current];

/***** Keeping Background1 centered while zooming *****/
background_xscale[1] = view_wview[view_current] / 1280;
background_yscale[1] = view_hview[view_current] / 720;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
