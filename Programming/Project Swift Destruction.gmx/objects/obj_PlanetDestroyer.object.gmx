<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_PlanetDestroyer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>Ship</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>myController = instance_create(x,y,obj_PDestroyerController);
myController.ships[0] = id;

chargerHolder = instance_create(x,y,obj_Charger);

chargerHolder.shipDestroyer = id;

//global.buttonTier++;//This adds code to get some UI for the controller.
stratButtonTier = global.buttonTier;
buttonSprite = sprite_DestroyerIcon;
buttonWidth = sprite_get_width(buttonSprite);
buttonHeight = sprite_get_height(buttonSprite);
buttonNumber = 1; //How many buttons we printing?

idleMax = 0; //Max frame for the idle.
idleMin = 0; //Lowest idle frame.
moveStart = 1; //frame where we start the movement
moveMax = 14; //highest move frame. (May not want it to be the final frame)
moveMin = 7; //Lowest movement frame. (may not want it to be the start)
laserMin = 42;
laserMax = 44;
charging = false;
chargeTime = 5;

stratGoalX = 0;
stratGoalY = 0;
stratSpeed = 5;


destroying = false; //Is it lasering?
global.destroyable = false;//Can i laser?
startLaser = 24;
endLaser = 59;

life = 500;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Explosion code goes here.
with(chargerHolder) instance_destroy();
audio_play_sound(sound_Missle, 0, false);
scriptParticleEngine(x,y,0,random(50),250,100,0,360,1,6,c_gray,sprite_SoftParticle);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Nope
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(myController.target&gt;0 &amp;&amp; instance_exists(myController.target))
{
    valueHolder = array_length_1d(myController.target.ships);
    
    flipper = 1;
    
    if(global.missiles_fired == 0)
    {
        scriptToast("Missiles", "This will cause the planet destroyer to shoot a volley of missiles. Effective against groups!", 90);
    }
    
    global.missiles_fired++;
    if(valueHolder&gt;0)
    {
        for(i=0;i&lt;10;i++)
        {   
            holder = instance_create(x,y,Missle);
            
            targetHolder = myController.target.ships[random(valueHolder-1)];
            
            holder.target = Monster;
            
            /*holder.x = x+sprite_get_width(sprite_index)/2;
            holder.y = y+sprite_get_height(sprite_index)/2;*/
            
            holder.x = x+sprite_get_width(sprite_index)/4+((i+1)*12)
            holder.y = y+sprite_get_height(sprite_index)/2;
            
            holder.damage = 60;
            
            /*aimX = (targetHolder.x + sprite_get_width(targetHolder.sprite_index)/2);
            aimY = (targetHolder.y + sprite_get_height(targetHolder.sprite_index)/2);
        
            holder.direction = point_direction(holder.x,holder.y,aimX,aimY);*/
            
            holder.goalX = (targetHolder.x + sprite_get_width(targetHolder.sprite_index)/2);
            holder.goalY = (targetHolder.y + sprite_get_height(targetHolder.sprite_index)/2);
            
            holder.direction = 90*flipper;
            flipper = flipper*-1;
        
            holder.speed = 15;
            
            //holder.image_xscale = 2;
            //holder.image_yscale = 2;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(myController.target&gt;0 &amp;&amp; instance_exists(myController.target))
{
    valueHolder = array_length_1d(myController.target.ships);
    
    if(valueHolder&gt;0)
    {
        if(global.lasers_fired == 0)
        {
            scriptToast("Lasers", "This will cause the planet destroyer to shoot a deadly laser blast. Very powerful!", 90);
        }
        global.lasers_fired++;
        holder = instance_create(x,y,Laser);
        
        holder.maker = id;
        
        targetHolder = myController.target.ships[random(valueHolder-1)];
        
        holder.target = targetHolder;
        
        holder.x = targetHolder.x + sprite_get_width(targetHolder.sprite_index)/2;
        holder.y = targetHolder.y + sprite_get_width(targetHolder.sprite_index)/2;
        
        holder.color1 = c_blue;
        holder.color2 = c_blue;
        holder.laserWidth = 15;
        
        holder.damage = 300;
        
        holder.speed = 8;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>charging = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(life&lt;=0)
{
    //they died, time to explode.
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.destroyable)
{
    if(stratGoalX != 0 || stratGoalY != 0)//if the ship has a movement goal
    {    
        if((x &gt; stratGoalX-speed &amp;&amp; x &lt; stratGoalX+speed) &amp;&amp; (y &gt; stratGoalY-speed &amp;&amp; y &lt; stratGoalY+speed) ) //If it's within a range..
        //if(x == stratGoalX &amp;&amp; y == stratGoalY)
        {
            stratGoalX = 0; //Close enough
            stratGoalY = 0;
            speed = 0;
        }
        else
        {
            direction = point_direction(x,y,stratGoalX,stratGoalY);
            speed = stratSpeed;
        
            
        }
    }
    else
    {
        direction = 0;
        speed = 0;
    }
}
else
{
    direction = 0;
    speed = 0;
}


if(global.battleState == 0)//animating
{
    if(image_index&gt;idleMax)
    {
        image_index = idleMin;
    }
}
else if(!destroying)
{
    if(image_index&lt;moveStart)
    {
        image_index = moveStart;
    }
    if(image_index&gt;=moveMax)
    {
        image_index = moveMin;
    }
}
else
{  
    if(image_index&lt;startLaser)
    {
        image_index = startLaser;
    }
    else if(charging &amp;&amp; image_index&gt;=laserMax)
    {
        image_index = laserMin;
    }
    else if(image_index&gt;=endLaser)
    {
           image_speed = 0;
           holder = instance_create(x + sprite_get_width(sprite_index)/2,y +sprite_get_height(sprite_index)/2,obj_deathLaser)
           holder.y -= sprite_get_height(holder.sprite_index)/2;
           holder.master = id;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Button collision
for(i = 0; i&lt;buttonNumber;i++)
{
    if(global.destroyable)
    {
        if(scriptRectanglePointCollision(mouse_x,mouse_y, view_xview[view_current] + buttonWidth*i,view_yview[view_current] + view_hview[view_current]-(stratButtonTier*buttonHeight),view_xview[view_current] + buttonWidth*(i+1),view_yview[view_current] + view_hview[view_current]-((stratButtonTier-1)*buttonHeight)))
        {/*
            destroying = true;
            charging = true;
            alarm[0] = 30*chargeTime;*/
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Nope
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if(!global.destroyable)
{
    color = c_red;
}
else
{
    color = c_white;
}

for(i=0;i&lt;buttonNumber;i++)
{
    //draw_sprite_ext(buttonSprite,i,view_xview[view_current] + i*buttonWidth,view_yview[view_current] + view_hview[view_current]-(buttonHeight*stratButtonTier),1,1,0,color,1)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>246,246</point>
  </PhysicsShapePoints>
</object>
