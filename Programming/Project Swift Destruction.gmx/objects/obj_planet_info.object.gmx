<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_planet_selection</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get the planet reference
if (global.currently_selected_planet_id != -1)
{
    planet_id = global.currently_selected_planet_id;
}

onClose = false;

// Planet Name

// Planet Approx Population

// Planet Type with Planet Threat Level (ships)

// Load the invade button object and set it to visible
//instance_create(x, y, obj_invade_planet_button);
btn_invade = instance_create((x + (sprite_width/2)), y + 185, obj_invade_planet_button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//x = (view_xview[0] + view_wview[0]-(sprite_get_width(sprite_planet_selection) + 50));
//y = (view_yview[0] + 50);

btn_invade.x = x + (sprite_width/2);
btn_invade.y = y + 185;

global.mouse_in_info_bounds = false;

if ((mouse_x &gt; x) &amp;&amp; (mouse_x &lt; x + sprite_width)) {
    if ((mouse_y &gt; y) &amp;&amp; (mouse_y &lt; y + sprite_height)) {            
            global.mouse_in_info_bounds = true;
    }
}

if ((mouse_x &gt;= x + sprite_get_width(sprite_planet_selection) - 25) &amp;&amp; (mouse_x &lt;= x + sprite_get_width(sprite_planet_selection) - 25 + sprite_get_width(sprite_close_false))) {
    if ((mouse_y &gt;= y-5) &amp;&amp; (mouse_y &lt;= y-5+sprite_get_height(sprite_close_false))) {
        onClose = true;
    } else {
        onClose = false;
    }
} else {
    onClose = false;
}

if ((onClose) &amp;&amp; (mouse_check_button_released(mb_left))) {
    // Close the info
    scriptDeselectAllPlanets();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.currently_selected_planet_id != -1)
{
    draw_self();
    
    planet_x = x + 5 + sprite_width/2 - sprite_get_width(sprite_Planet_Terrestrial)/2;
    planet_y = y + sprite_get_width(sprite_Planet_Terrestrial)/2;
    
    planet_scale_x = 0.2;
    planet_scale_y = 0.2;
    
    switch (planet_id.type) {
        case 0:
            //draw a sprite at position
            draw_sprite_ext(sprite_GAS_PLANET, -1, planet_x, planet_y, planet_scale_x, planet_scale_y, 0, c_white, 1);
            break;
        case 1:
            draw_sprite_ext(sprite_ICE_PLANET, -1, planet_x, planet_y, planet_scale_x, planet_scale_y, 0, c_white, 1);
            break;
        case 2:
            draw_sprite_ext(sprite_SAND_PLANET, -1, planet_x, planet_y, planet_scale_x, planet_scale_y, 0, c_white, 1);
            break;
        case 3:
            draw_sprite_ext(sprite_magma_planet, -1, planet_x, planet_y, planet_scale_x, planet_scale_y, 0, c_white, 1);
            break;
        case 4:
            draw_sprite_ext(sprite_TERRESTRIAL_PLANET, -1, planet_x, planet_y, planet_scale_x, planet_scale_y, 0, c_white, 1);
            //draw_sprite(sprite_TERRESTRIAL_PLANET, -1, planet_x, planet_y);
            break;
        default:
            draw_sprite_ext(sprite_WATER_PLANET, -1, planet_x, planet_y, planet_scale_x, planet_scale_y, 0, c_white, 1);
            break;
    }
    
    ship_x = planet_x - 5;// - sprite_get_width(sprite_Monster1)/2;
    ship_y = planet_y + 5;// - sprite_get_width(sprite_Monster1)/2;
    ship_scale = 0.5;
    switch (planet_id.threat) {
        case 1:
            // Add 1 ship
            draw_sprite_ext(sprite_Monster1, 0, ship_x-15, ship_y+10, ship_scale, ship_scale, 0, c_white, 1);
            break;
        case 2:
            // Add 3 ships
            draw_sprite_ext(sprite_Monster1, 0, ship_x-sprite_get_width(sprite_Monster1)/4, ship_y, ship_scale, ship_scale, 0, c_white, 1);
            draw_sprite_ext(sprite_Monster1, 0, ship_x+sprite_get_width(sprite_Monster1)/4, ship_y - sprite_get_height(sprite_Monster1)/4 - 10, ship_scale, ship_scale, 0, c_white, 1);
            draw_sprite_ext(sprite_Monster1, 0, ship_x+sprite_get_width(sprite_Monster1)/4, ship_y + sprite_get_height(sprite_Monster1)/4 + 10, ship_scale, ship_scale, 0, c_white, 1);
            break;
        default:
            // Add 5 ships
            draw_sprite_ext(sprite_Monster1, 0, ship_x, ship_y + 5, ship_scale, ship_scale, 0, c_white, 1);
            draw_sprite_ext(sprite_Monster1, 0, ship_x+sprite_get_width(sprite_Monster1)/4 + 5, ship_y - sprite_get_height(sprite_Monster1)/4 - 10, ship_scale, ship_scale, 0, c_white, 1);
            draw_sprite_ext(sprite_Monster1, 0, ship_x+sprite_get_width(sprite_Monster1)/4 + 5, ship_y + sprite_get_height(sprite_Monster1)/4 + 20, ship_scale, ship_scale, 0, c_white, 1);
            draw_sprite_ext(sprite_Monster1, 0, ship_x-sprite_get_width(sprite_Monster1)/4 - 5, ship_y - sprite_get_height(sprite_Monster1)/4 - 10, ship_scale, ship_scale, 0, c_white, 1);
            draw_sprite_ext(sprite_Monster1, 0, ship_x-sprite_get_width(sprite_Monster1)/4 - 5, ship_y + sprite_get_height(sprite_Monster1)/4 + 20, ship_scale, ship_scale, 0, c_white, 1);
            break;
    }
    
    draw_set_font(font_Text);
    draw_set_color(c_white);
    draw_text(x+20, y+140, planet_id.planet_name);
    
    if (planet_id.isBoss)
    {
        // Highlight
        draw_set_font(font_General);
        draw_text(x+12, y-19, global.bossPlanetGeneralName);
        draw_text(x+12, y-21, global.bossPlanetGeneralName);
        draw_text(x+8, y-19, global.bossPlanetGeneralName);
        draw_text(x+8, y-21, global.bossPlanetGeneralName);
        
        draw_set_font(font_Boss);
        draw_text(x+42, y+212, "BOSS");
        draw_text(x+42, y+208, "BOSS");
        draw_text(x+38, y+212, "BOSS");
        draw_text(x+38, y+208, "BOSS");
        
        // Boss Text
        draw_set_font(font_Boss);
        draw_set_color(c_red);
        draw_text(x+40, y+210, "BOSS");
        
        // General Name
        draw_set_font(font_Protected);
        draw_set_color(c_white);
        draw_text(x+10, y-35, "Protected Planet");
        draw_set_color(c_green);
        draw_set_font(font_General);
        draw_text(x+10, y-20, global.bossPlanetGeneralName);
        draw_set_color(c_white);
    }
    
    // Draw close button
    if (onClose) {
        draw_sprite(sprite_close_true, -1, x + sprite_get_width(sprite_planet_selection) - 25, y-5);
    } else {
        draw_sprite(sprite_close_false, -1, x + sprite_get_width(sprite_planet_selection) - 25, y-5);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>112,112</point>
  </PhysicsShapePoints>
</object>
